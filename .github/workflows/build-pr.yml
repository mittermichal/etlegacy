# ______   _______   _
#|  ____| |__   __| | |
#| |__       | |    | |        ___    __ _    __ _    ___   _   _
#|  __|      | |    | |       / _ \  / _` |  / _` |  / __| | | | |
#| |____     | |    | |____  |  __/ | (_| | | (_| | | (__  | |_| |
#|______|    |_|    |______|  \___|  \__, |  \__,_|  \___|  \__, |
#                                     __/ |                  __/ |
#                                    |___/                  |___/
# 2024 Legacy team
name: ETLBuildPR

on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened, labeled ]

jobs:

# Try to figure out the build version information only once
  version:
    runs-on: ubuntu-latest
    outputs:
      describe: ${{ steps.git.outputs.describe }}
      tag: ${{ steps.git.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Fetch git version information
        id: git
        run: |
          git fetch --tags --force
          git_describe=$(git describe --abbrev=7 2>/dev/null | awk '{$1=$1};1')
          git_tag=$(git describe --abbrev=0 2>/dev/null | awk '{$1=$1};1')
          echo "Version info: $git_describe ?? $git_tag"
          echo "describe=$git_describe" >> "$GITHUB_OUTPUT"
          echo "tag=$git_tag" >> "$GITHUB_OUTPUT"


  lnx-aarch64-mod:
    if: contains(github.event.pull_request.labels.*.name, 'build')
    runs-on: ubuntu-20.04
    needs: version
    container:
      image: etlegacy/lnx-aarch64-build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        env:
          CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
          CI_ETL_TAG: ${{needs.version.outputs.tag}}
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          ./easybuild.sh build -RPIT -mod -noextra -ninja

      - uses: actions/upload-artifact@v4
        with:
          name: lnx-aarch64-mod
          path: |
            build/legacy/cgame*.so
            build/legacy/ui*.so
            build/legacy/qagame*.so
            build/legacy/tvgame*.so

      - uses: actions/upload-artifact@v4
        with:
          name: incomplete-mod-pk3
          path: build/legacy/legacy_*.pk3

  osx-mod:
    if: contains(github.event.pull_request.labels.*.name, 'build')
    runs-on: macos-12
    needs: version
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: brew bundle

      - name: List dev tools
        run: |
          ls -la /Applications/ | grep Xcode
          ls -la /Library/Developer/CommandLineTools/SDKs/
          xcode-select --print-path
          xcrun -sdk macosx --show-sdk-path

      - name: Build
        env:
          SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
          DEVELOPER_DIR: /Library/Developer/CommandLineTools
          CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
          CI_ETL_TAG: ${{needs.version.outputs.tag}}
        shell: bash
        run: |
          ./easybuild.sh build -64 -mod -noextra --osx=10.10 --osx-arc="arm64" -j

      - uses: actions/upload-artifact@v4
        with:
          name: osx-mod
          path: |
            build/legacy/cgame_mac
            build/legacy/ui_mac
            build/legacy/qagame_mac
            build/legacy/tvgame_mac


  #   __  __                                                          _
  #  |  \/  |                                                        | |
  #  | \  / |   ___   _ __    __ _    ___     _ __ ___     ___     __| |  ___
  #  | |\/| |  / _ \ | '__|  / _` |  / _ \   | '_ ` _ \   / _ \   / _` | / __|
  #  | |  | | |  __/ | |    | (_| | |  __/   | | | | | | | (_) | | (_| | \__ \
  #  |_|  |_|  \___| |_|     \__, |  \___|   |_| |_| |_|  \___/   \__,_| |___/
  #                           __/ |
  #                          |___/
  # Since lnx32 is installing the most, use it as the step that combines all the other steps mod files.
  # This step also generates the final packages for 32 bit lnx.
  mod-merger:
    if: contains(github.event.pull_request.labels.*.name, 'build')
    runs-on: ubuntu-20.04
    needs: [ version, osx-mod, lnx-aarch64-mod ]  # todo: lnx64-mod, lnx32-mod, osx-mod, win-mod, win64-mod, lnx-aarch64-mod, android-mod
    steps:

      - uses: actions/download-artifact@v4
        with:
          name: incomplete-mod-pk3

      - uses: actions/download-artifact@v4
        with:
          pattern: '*-mod'
          path: platforms
          merge-multiple: true

      - name: Create supported platform manifest
        shell: bash
        run: |
          echo "win_x86 win_x86_64 lnx_x86 lnx_x86_64 macos_x86_64 macos_aarch64 lnx_armv8_64 android_aarch64 android_x86 android_x86_64" > platforms.manifest

      - name: Merge mod files
        shell: bash
        run: |
          zip -rvj legacy_*.pk3 platforms.manifest platforms/cgame* platforms/ui* platforms/libcgame* platforms/libui*

      - name: Create mod zip
        shell: bash
        run: |
          zip -rvj etlegacy-mod-${{needs.version.outputs.describe}}.zip legacy_*.pk3 platforms/qagame* platforms/tvgame*

      - name: Remove old artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          failOnError: false
          name: |
            incomplete-mod-pk3
            *-mod

      - uses: actions/upload-artifact@v4
        with:
          name: All-mods
          path: legacy_*.pk3

      - uses: actions/upload-artifact@v4
        with:
          name: mod-zip
          path: etlegacy-mod-*.zip


# Run the build on all the current platforms
  lnx64:
    runs-on: ubuntu-20.04
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    needs: [ version ]
    env:
      CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
      CI_ETL_TAG: ${{needs.version.outputs.tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: etlegacy/lnx-build:latest
          options: -v ${{ github.workspace }}:/code -e CI_ETL_DESCRIBE=${{needs.version.outputs.describe}} -e CI_ETL_TAG=${{needs.version.outputs.tag}} -e CI=true
          run: |
            git config --global --add safe.directory /code
            ./easybuild.sh build -64

      - name: Change Owner of Container Working Directory
        run: |
          action_name=$(whoami)
          action_group=$(groups $action_name | awk '{print $3}')
          sudo chown $action_name:$action_group -R .

      - name: Generate packages
        uses: addnab/docker-run-action@v3
        with:
          image: etlegacy/lnx-build:latest
          options: -v ${{ github.workspace }}:/code -e CI_ETL_DESCRIBE=${{needs.version.outputs.describe}} -e CI_ETL_TAG=${{needs.version.outputs.tag}} -e CI=true
          run: |
            cd build/
            cpack

  lnx32:
    runs-on: ubuntu-20.04
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    needs: [ version ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: etlegacy/lnx-build:latest
          options: -v ${{ github.workspace }}:/code -e CI_ETL_DESCRIBE=${{needs.version.outputs.describe}} -e CI_ETL_TAG=${{needs.version.outputs.tag}} -e CI=true
          run: |
            git config --global --add safe.directory /code
            ./easybuild.sh build -32

      - name: Change Owner of Container Working Directory
        run: |
          action_name=$(whoami)
          action_group=$(groups $action_name | awk '{print $3}')
          sudo chown $action_name:$action_group -R .

      - name: Generate packages
        uses: addnab/docker-run-action@v3
        with:
          image: etlegacy/lnx-build:latest
          options: -v ${{ github.workspace }}:/code -e CI_ETL_DESCRIBE=${{needs.version.outputs.describe}} -e CI_ETL_TAG=${{needs.version.outputs.tag}} -e CI=true
          run: |
            cd build/
            cpack

  lnx-aarch64:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    needs: [ version ]
    container:
      image: etlegacy/lnx-aarch64-build
    env:
      CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
      CI_ETL_TAG: ${{needs.version.outputs.tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        run: |
          ./easybuild.sh build -RPIT -ninja

      - name: Generate packages
        shell: bash
        working-directory: build
        run: cpack

  osx:
    runs-on: macos-12
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    needs: [ version ]
    env:
      CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
      CI_ETL_TAG: ${{needs.version.outputs.tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: |
          brew bundle
          brew install freetype librsvg graphicsmagick imagemagick

      - name: Build
        env:
          SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
          DEVELOPER_DIR: /Library/Developer/CommandLineTools
        shell: bash
        run: |
          ./easybuild.sh build -64 --osx=10.10 --osx-arc="x86_64;arm64" -j

      - name: Generate packages
        shell: bash
        run: ./easybuild.sh package -64 --osx=10.10 --osx-arc="x86_64;arm64" -j

  win:
    runs-on: windows-2019
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    needs: [ version ]
    env:
      CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
      CI_ETL_TAG: ${{needs.version.outputs.tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        shell: cmd
        run: |
          call .\easybuild.bat build

      - name: Generate packages
        shell: cmd
        working-directory: build
        run: cpack

  win64:
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    runs-on: windows-2019
    needs: [ version ]
    env:
      CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
      CI_ETL_TAG: ${{needs.version.outputs.tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        shell: cmd
        run: |
          call .\easybuild.bat build -64

      - name: Generate packages
        shell: cmd
        working-directory: build
        run: cpack

  android:
    if: contains(github.event.pull_request.labels.*.name, 'build-client')
    runs-on: ubuntu-20.04
    env:
      CI_ETL_DESCRIBE: ${{needs.version.outputs.describe}}
      CI_ETL_TAG: ${{needs.version.outputs.tag}}
      BUILD_ANDROID: ${{ vars.BUILD_ANDROID }}
    needs: [ version ]
    container:
      image: etlegacy/android-build
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v4
        if: ${{ vars.BUILD_ANDROID != 'FALSE' }}
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Android Repo
        uses: actions/checkout@v4
        if: ${{ vars.BUILD_ANDROID != 'FALSE' }}
        with:
          submodules: true

      - name: Build and Generate Package
        if: ${{ vars.BUILD_ANDROID != 'FALSE' }}
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          ./gradlew clean assembleDebug
          ls -R

      - name: Rename APK
        if: ${{ vars.BUILD_ANDROID != 'FALSE' }}
        run: |
          for FILE in ./app/build/outputs/apk/debug/*; do mv $FILE ${FILE%-*}.apk; done
          ls app/build/outputs/apk/debug

      - name: Skip android build
        if: ${{ vars.BUILD_ANDROID == 'FALSE' }}
        run: echo "Skipping android build because its disabled with BUILD_ANDROID workflow variable"

